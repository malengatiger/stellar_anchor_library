import 'dart:async';
import 'dart:convert';

import 'package:crypto/crypto.dart';
import 'package:flutter/material.dart';
import 'package:stellar_anchor_library/api/net.dart';
import 'package:stellar_anchor_library/models/payfast_request.dart';
import 'package:stellar_anchor_library/ui/payments/success.dart';
import 'package:stellar_anchor_library/util/functions.dart';
import 'package:stellar_anchor_library/util/util.dart';
import 'package:webview_flutter/webview_flutter.dart';

/*
<form action="https://sandbox.payfast.co.za/eng/process" method="POST">

<input type="hidden" name="merchant_id" value="10000100">
<input type="hidden" name="merchant_key" value="46f0cd694581a">
<input type="hidden" name="return_url" value="https://www.yoursite.com/return">
<input type="hidden" name="cancel_url" value="https://www.yoursite.com/cancel">
<input type="hidden" name="notify_url" value="https://www.yoursite.com/notify">

m_payment_id  - merchant identifier, could be uuid
amount
item_name
payment_method = eft or dc
🌼  🌼 signature
  A security signature of the transmitted data taking the form of an MD5 hash of the submitted variables.
  The string from which the hash is created, is the concatenation of the name value pairs of all the non-blank variables
  with ‘&’ used as a separator eg. name_first=John&name_last=Doe&email_address=… where pairs are listed in the order in which they appear on this page.

  This hash will be regenerated by the PayFast engine and the values compared to ensure the integrity of the data transfer.
 */
class PayFastWebView extends StatefulWidget {
  final PayFastRequest payFastRequest;

  const PayFastWebView({Key key, this.payFastRequest}) : super(key: key);
  @override
  _PayFastWebViewState createState() => _PayFastWebViewState();
}

class _PayFastWebViewState extends State<PayFastWebView> {
  PayFastRequest mRequest;
  _createSignatureAndURL() async {
    assert(mRequest.transactionDetails != null);
    p('🔵 🔵 ... Processing the payment request ... create signature and url ...');

    var merchantId = await getPayfastMerchantId();
    var merchantKey = await getPayfastMerchantKey();
    var returnUrl = await getPayfastReturnUrl();
    var notifyUrl = await getPayfastNotifyUrl();
    var cancelUrl = await getPayfastCancelUrl();
    var url = await getPayfastUrl();
    // 🍎 🍎 🍎 🍎
    //merchant_id=10017569
    // &merchant_key=x9wtl6t7tnk40
    // &return_url=https%3A%2F%2Fnpservices-c4kwri5qva-ew.a.run.app%2Fpayfast_return
    // &cancel_url=https%3A%2F%2Fnpservices-c4kwri5qva-ew.a.run.app%2Fpayfast_cancel
    // &notify_url=https%3A%2F%2Fnpservices-c4kwri5qva-ew.a.run.app%2Fpayfast_notify
    // &m_payment_id=12345678
    // &amount=13.50
    // &item_name=TaxiYam
    //////////////// mine
    //merchant_id=10017569
    // &merchant_key=x9wtl6t7tnk40
    // &return_url=https%3A%2F%2Fnpservices-c4kwri5qva-ew.a.run.app%2Fpayfast_return
    // &cancel_url=https%3A%2F%2Fnpservices-c4kwri5qva-ew.a.run.app%2Fpayfast_cancel
    // &notify_url=https%3A%2F%2Fnpservices-c4kwri5qva-ew.a.run.app%2Fpayfast_notify
    // &m_payment_id=12345678
    // &amount=13.50
    // &item_name=TaxiYam
    var rUrl = Uri.encodeComponent(returnUrl.trim());
    var cUrl = Uri.encodeComponent(cancelUrl.trim());
    var nUrl = Uri.encodeComponent(notifyUrl.trim());
    p(' 🍎 🍎 🍎 returnUrl: $rUrl 🍎 notifyUrl: $nUrl 🍎 cancelUrl: $cUrl');
    var db = StringBuffer();
    db.write('merchant_id=$merchantId&');
    db.write('merchant_key=$merchantKey&');
    db.write('return_url=$rUrl&');
    db.write('cancel_url=$cUrl&');
    db.write('notify_url=$nUrl&');
    db.write('m_payment_id=${mRequest.transactionDetails.paymentId}&');
    db.write('amount=' +
        '${getFormattedAmount('${mRequest.transactionDetails.amount}', context)}' +
        '&');

    var encoded =
        Uri.encodeComponent(mRequest.transactionDetails.itemName.trim());
    db.write('item_name=$encoded');

    p('🔵 🔵 🔵 🔵 string used to create signature, 🍎 🍎 🍎 check urlEncoding: 🔵 \n${db.toString().trim()} 🍎 🔵 🔵 🔵 🔵');

    var bytes = utf8.encode(db.toString().trim());
    Digest md5Digest = md5.convert(bytes);
    print('🌼 🌼 🌼 🌼 - LOCAL md5 hash of PayFastRequest: $md5Digest 🌼 🌼');

    var sig = await _getSignature(widget.payFastRequest);
    print('🌼 🌼 🌼 🌼 - REMOTE md5 hash of PayFastRequest: $sig 🌼 🌼');
    var m = StringBuffer();
    m.write(url);
    m.write('?');
    m.write(db.toString());
    m.write('&signature=$md5Digest');
    mURL = m.toString();
    p('🐱 🐱 Complete URL for PayFast: \n🐱 $mURL 🐱 .. setState ...');
    setState(() {});
  }

  String mURL;
  final Completer<WebViewController> _controller =
      Completer<WebViewController>();
  @override
  void initState() {
    super.initState();
    assert(widget.payFastRequest != null);
    assert(widget.payFastRequest.transactionDetails != null);
    assert(widget.payFastRequest.transactionDetails.amount != null);
    assert(widget.payFastRequest.transactionDetails.itemName != null);
    assert(widget.payFastRequest.transactionDetails.paymentId != null);
    mRequest = widget.payFastRequest;
    _createSignatureAndURL();
  }

  Future<String> _getSignature(PayFastRequest request) async {
    p('🔆 🔆 ... Getting signature from backend ...');

    var sig = await NetUtil.post(
        headers: NetUtil.xHeaders,
        apiRoute: 'getPayfastSignature',
        bag: request.toJson());
    var mSig = sig['hashed'];
    p('😪 😪 😪 ... Signature from backend, check against local hash: 🍎 $mSig 🍎');
    return mSig;
  }

  @override
  Widget build(BuildContext context) {
    return SafeArea(
        child: Scaffold(
            appBar: AppBar(
              backgroundColor: Colors.indigo[400],
              title: Text(
                "PayFast Payment Request",
                style: Styles.whiteSmall,
              ),
            ),
            body: Stack(
              children: <Widget>[
                mURL == null
                    ? Container(
                        child: Center(
                          child: CircularProgressIndicator(),
                        ),
                      )
                    : Builder(builder: (BuildContext context) {
                        return Padding(
                          padding: const EdgeInsets.all(16.0),
                          child: WebView(
                            initialUrl: mURL,
                            javascriptMode: JavascriptMode.unrestricted,
                            onWebViewCreated:
                                (WebViewController webViewController) {
                              _controller.complete(webViewController);
                            },
                            debuggingEnabled: true,
                            javascriptChannels: <JavascriptChannel>[
                              _toasterJavascriptChannel(context),
                            ].toSet(),
                            navigationDelegate: (NavigationRequest request) {
//                              if (request.url
//                                  .startsWith('https://www.youtube.com/')) {
//                                print('blocking navigation to $request}');
//                                return NavigationDecision.prevent;
//                              }
                              p('NetUtil: 🔆 allowing navigation to $request');
                              return NavigationDecision.navigate;
                            },
                            onPageStarted: (String url) {
                              p(' 🌼  🌼  🌼 Page started loading: $url');
                            },
                            onPageFinished: (String url) {
                              _processReceivedUrl(url, context);
                            },
                            gestureNavigationEnabled: true,
                          ),
                        );
                      }),
              ],
            )));
  }

  void _processReceivedUrl(String url, BuildContext context) {
    p(' 🍎 🍎 🍎 onPageFinished: 🍎 🍎 🍎  Page finished loading; callback from 🌼 PayFast : $url 🌼');
    if (url.contains('payfast_return')) {
      p('WE may HAVE A 🥬 SUCCESSFUL 🥬 PAYMENT');
      Navigator.push(
        context,
        MaterialPageRoute(
            builder: (context) => OwzoCallbackPage(
                  message: 'Succeeded!',
                  color: Colors.teal[700],
                )),
      );
    }
    if (url.contains('payfast_notify')) {
      p('WE HAVE A 💙💙 NOTIFY 💙💙 CALLBACK');
      Navigator.push(
        context,
        MaterialPageRoute(
            builder: (context) => OwzoCallbackPage(
                  message: 'Notified',
                  color: Colors.blue[600],
                )),
      );
    }

    if (url.contains('payfast_cancel')) {
      p('WE HAVE A 🍐🍐 CANCELLED 🍐🍐 PAYMENT');
      Navigator.push(
        context,
        MaterialPageRoute(
            builder: (context) => OwzoCallbackPage(
                  message: 'Cancelled',
                  color: Colors.grey[400],
                )),
      );
    }
  }

  JavascriptChannel _toasterJavascriptChannel(BuildContext context) {
    return JavascriptChannel(
        name: 'Toaster',
        onMessageReceived: (JavascriptMessage message) {
          Scaffold.of(context).showSnackBar(
            SnackBar(content: Text(message.message)),
          );
        });
  }
}
